<?php
/**
 * TinyPNG module
 *
 * Tinify PHP client for ProcessWire
 *
 * @version 1.1.0
 * @author Jukka Hankaniemi https://github.com/Roope
 * @copyright Blowback https://github.com/BlowbackDesign
 * @license MIT http://opensource.org/licenses/MIT
 *
 */
class TinyPNG extends WireData implements Module, ConfigurableModule {

	const VARIATION = 'tiny';
	const LOG_NAME = 'tiny-png';
	const LIB_PATH = 'tinify-php/lib/';

	const UNKNOWN = 0;
	const SUCCESS = 1;
	const FAILURE = 2;

	private $status, $image, $ignoredSizes, $sizerOptions;

	/**
	 * ProcessWire module info
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'TinyPNG Image Compression',
			'summary' => 'Tinify PHP client for ProcessWire.',
			'version' => 110,
			'href' => 'https://github.com/BlowbackDesign/TinyPNG',
			'singular' => true,
			'autoload' => true,
		);
	}
	/**
	 * Default Tinify options for PW ImageSizer
	 *
	 */
	private static function imageSizerOptions() {
		return array(
			'tinify' => null,
			'tinify-png' => true,
			'tinify-jpeg' => true,
		);
	}
	/**
	 * Tinify client allowed image types
	 *
	 */
	private static function clientImageTypes() {
		return array('png', 'jpeg');
	}
	/**
	 * Tinify PHP library files
	 *
	 */
	private static function libFiles() {
		return array(
			'Tinify/Exception.php',
			'Tinify/ResultMeta.php',
			'Tinify/Result.php',
			'Tinify/Source.php',
			'Tinify/Client.php',
			'Tinify.php',
		);
	}
	/**
	 * Module construct: include library and set defaults
	 *
	 */
	public function __construct() {
		$path = dirname(__FILE__) . '/' . self::LIB_PATH;
		foreach(self::libFiles() as $file) require_once($path . $file);
		$this->sizerOptions = array_merge(self::imageSizerOptions(), wire('config')->imageSizerOptions);
		$this->ignoredSizes = array();
		$this->status = self::UNKNOWN;
		$this->image = null;
		$this->set('auto', 0);
		$this->set('limit', 500);
		$this->set('logging', 1);
		$this->set('sizes', '');
		$this->set('apikey', '');
	}
	/**
	 * Module init: set ignored sizes from pw and module config
	 *
	 */
	public function init() {
		$this->setConfigIgnoredSizes();
	}
	/**
	 * Module ready: set up hooks
	 *
	 */
	public function ready() {
		$this->addHook('Pageimage::tinify', $this, 'tinifyPageimage');
		$this->addHookBefore('Pageimage::crop', $this, 'beforePageimageCrop');
		$this->addHookBefore('Pageimage::size', $this, 'beforePageimageSize');
		$this->addHookAfter('Pageimage::size', $this, 'afterPageimageSize');
		$this->addHookBefore('ImageSizer::resize', $this, 'beforeImageSizerResize');
		$this->addHookAfter('ProcessPageEditImageSelect::executeResize', $this, 'imageSelectResize');
		// validate key at module config page
		if($this->page->name == 'module' && $this->input->get->name == $this->className) {
			$this->setKeyAndValidate();
		}
	}
	/**
	 * Module uninstall: delete log file
	 *
	 */
	public function ___uninstall() {
		wire('log')->delete(self::LOG_NAME);
	}
	/**
	 * Pageimage::tinify hook: manual and forced tiny variations
	 *
	 * @param HookEvent $event Hook for Pageimage object
	 *
	 */
	public function tinifyPageimage(HookEvent $event) {
		$image = $event->object;
		if($this->imageTypeAllowed($image->filename, null)) {
			$filename = $this->tinyFilename($image);
			if($this->compressImage($image->filename, $filename)) {
				$image = $this->tinyPageimage($image, $filename);
			}
		}
		$event->return = $image;
	}
	/**
	 * Pageimage::crop before hook: disable auto compression by default
	 *
	 * @param HookEvent $event Hook for ImageSizer object
	 *
	 */
	public function beforePageimageCrop(HookEvent $event) {
		list($x, $y, $width, $height, $options) = $event->arguments;
		if(!isset($options['tinify'])) $options['tinify'] = false;
		$event->arguments = array($x, $y, $width, $height, $options);
	}
	/**
	 * Pageimage::size before hook: auto mode P1 - flag compressed image
	 *
	 * @param HookEvent $event Hook for ImageSizer object
	 *
	 */
	public function beforePageimageSize(HookEvent $event) {
		$this->image = null;
		$image = $event->object;
		list($width, $height, $options) = $event->arguments;
		$options = array_merge($this->sizerOptions, $options);
		if(!$this->imageTypeAllowed($image->filename, $options)) return;
		if(!$this->imageSizeAllowed((int) $width, (int) $height)) return;
		if($this->auto && $options['tinify'] === false) return;
		if($this->auto || $options['tinify'] === true) {
			$this->image = $image;
		}
	}
	/**
	 * ImageSizer::resize before hook: auto mode P2 - force 100% quality
	 *
	 * @param HookEvent $event Hook for ImageSizer object
	 *
	 */
	public function beforeImageSizerResize(HookEvent $event) {
		if($this->image instanceof Pageimage) {
			$image = $event->object;
			$image->setQuality(100);
		}
	}
	/**
	 * Pageimage::size after hook: auto mode P3 - compress the image and return tiny variation
	 *
	 * @param HookEvent $event Hook for ImageSizer object
	 *
	 */
	public function afterPageimageSize(HookEvent $event) {
		if($this->image === $event->object) {
			$image = $event->return;
			$filename = $this->tinyFilename($image);
			if($this->compressImage($image->filename, $filename)) {
				$event->return = $this->tinyPageimage($image, $filename);
			}
		}
		$this->image = null;
	}
	/**
	 * ProcessPageEditImageSelect::executeResize hook: auto mode for rich text embedded image
	 *
	 * @param HookEvent $event Hook for ProcessPageEditImageSelect object
	 *
	 */
	public function imageSelectResize(HookEvent $event) {
		if(preg_match("@src='([^']+)'@" , $event->return, $match)) {
			$src = $match[1];
			$filename = $this->tinyFilename($src);
			if(is_file($filename)) {
				$event->return = str_replace($src, $filename, $event->return);
			}
		}
	}
	/**
	 * Return tiny variation of a filename
	 *
	 * @param mixed $image Pageimage object or filename string
	 * @return string Filename for Tiny image variation
	 *
	 */
	private function tinyFilename($image) {
		if($image instanceof Pageimage) {
			$filename = $image->filename();
			$prefix = $image->getOriginal() ? "-" : ".-";
		} else {
			$filename = $image;
			$prefix = "-";
		}
		$pieces = explode(".", $filename);
		$extension = array_pop($pieces);
		$variation = $prefix . self::VARIATION;
		return implode(".", $pieces) . "{$variation}.{$extension}";
	}
	/**
	 * Return tiny variation of pageimage for given $image at $filename if available
	 *
	 * @param Pageimage $image Source for tiny variation
	 * @param string $filename Tiny variation filename
	 * @return Pageimage
	 *
	 */
	private function tinyPageimage(Pageimage $image, $filename) {
		if(is_file($filename)) {
			$tinyimage = clone $image;
			$original = $image->original ? : $image;
			$tinyimage->setFilename($filename);
			$tinyimage->setOriginal($original);
			return $tinyimage;
		}
		return $image;
	}
	/**
	 * Is image size allowed at given $width and $height
	 *
	 * @param int $width Resized image width
	 * @param int $height Resized image height
	 * @return bool
	 *
	 */
	private function imageSizeAllowed($width, $height) {
		foreach($this->ignoredSizes as $size) {
			if($size['width'] === $width && $size['height'] === $height) {
				return false;
			}
		}
		return true;
	}
	/**
	 * Is image type at given $filename allowed
	 *
	 * @param string $filename Path to image
	 * @param array $options Image sizer options
	 * @return bool
	 *
	 */
	private function imageTypeAllowed($filename, $options = array()) {
		$options = is_array($options) ? array_merge($this->sizerOptions, $options) : array();
		$type = ltrim(image_type_to_mime_type(exif_imagetype($filename)), 'image/');
		if(!in_array($type, self::clientImageTypes())) return false;
		if(isset($options["tinify-$type"]) && $options["tinify-$type"] === false) return false;
		return true;
	}
	/**
	 * Is Tinify compression allowed
	 *
	 * @return bool
	 *
	 */
	private function compressionAllowed() {
		if($this->status !== self::SUCCESS) return false;
		if(!empty($this->limit) && $this->compressionCount() >= $this->limit) return false;
		return true;
	}
	/**
	 * Copy and compress image at given $source to $destination
	 *
	 * @param string $source Image filename
	 * @param string $destination Image filename
	 * @throws WireException When fails to copy source image
	 * @return bool
	 *
	 */
	private function compressImage($source, $destination) {
		if(is_file($destination) && filemtime($destination) >= filemtime($source)) return true;
		$this->setKeyAndValidate();
		if(!$this->compressionAllowed()) return false;
		if(!@copy($source, $destination)) {
			throw new WireException("Failed to copy Tiny image variation: $source => $destination");
		}
		try {
			$tiny = \Tinify\fromFile($source);
			$tiny->toFile($destination);
			if($this->logging) {
				$sizeBefore = filesize($source);
				$sizeAfter = filesize($destination);
				$reducedSize = $sizeBefore - $sizeAfter;
				$reducedSizeKb = round($reducedSize / 1024, 1);
				$sizeBeforeKb = round($sizeBefore / 1024, 1);
				$sizeAfterKb = round($sizeAfter / 1024, 1);
				$saved = round(($reducedSize / $sizeBefore) * 100);
				list($file, $id) = array_reverse(explode('/', $source));
				$str = "$sizeBeforeKb KB --> $sizeAfterKb KB | Panda just saved you {$saved}% ({$reducedSizeKb} KB) from file: $file at page #{$id}";
				wire('log')->save(self::LOG_NAME, $str);
			}
			return true;
		} catch(\Tinify\Exception $e) {
			unlink($destination);
			$this->error($e->getMessage());
			if($this->logging) {
				wire('log')->save(self::LOG_NAME, $e->getMessage());
			}
			return false;
		}
	}
	/**
	 * Return API account compression count for this month
	 *
	 * @return int|null
	 *
	 */
	private function compressionCount() {
		return Tinify\getCompressionCount();
	}
	/**
	 * Set TinyPNG API key and validate client
	 *
	 */
	private function setKeyAndValidate() {
		$key = wire('input')->post->apikey ? : $this->apikey;
		if(strlen($key) > 0) {
			try {
				\Tinify\setKey($key);
				\Tinify\validate();
				$this->status = self::SUCCESS;
			} catch(\Tinify\Exception $e) {
				$this->status = self::FAILURE;
				$this->error($e->getMessage());
			}
		} else {
			$this->status = self::UNKNOWN;
		}
	}
	/**
	 * Set module config sizes to ignoredSizes array
	 *
	 */
	private function setConfigIgnoredSizes() {
		// ignore config options admin thumb size by default
		$width = wire('config')->adminThumbOptions['width'];
		$height = wire('config')->adminThumbOptions['height'];
		$this->setIgnoredSize($width, $height);
		// set user selectable ignored sizes from module config
		foreach(explode('|', wire('sanitizer')->text($this->sizes)) as $size) {
			$sizes = explode(',', $size);
			if(count($sizes) > 1) {
				list($width, $height) = $sizes;
				$this->setIgnoredSize($width, $height);
			}
		}
	}
	/**
	 * Set given $width and $height to ignoredSizes array
	 *
	 * @param int $width Ignored image width
	 * @param int $height Ignored image height
	 *
	 */
	private function setIgnoredSize($width, $height) {
		$sizes = array('width' => (int) $width, 'height' => (int) $height);
		$this->ignoredSizes[] = $sizes;
	}
	/**
	 * Get ProcessWire module config form and inputfields
	 *
	 * @return InputfieldWrapper
	 *
	 */
	public function getConfig() {
		$inputfields = new InputfieldWrapper();
		$inputfields->add($this->configApiKey());
		$inputfields->add($this->configLogging());
		$inputfields->add($this->configLimit());
		$inputfields->add($this->configAuto());
		$inputfields->add($this->configSizes());
		return $inputfields;
	}
	/**
	 * Static ProcessWire ConfigurableModule interface config
	 *
	 * @param array $data
	 * @return InputfieldWrapper
	 *
	 */
	public static function getModuleConfigInputfields(array $data) {
		$module = wire('modules')->get(__CLASS__);
		return $module->getConfig();
	}
	/**
	 * API key config inputfield
	 *
	 * @return InputfieldText
	 *
	 */
	protected function configApiKey() {
		$field = wire('modules')->get('InputfieldText');
		$field->attr('name+id', 'apikey');
		$field->label = 'API key';
		$field->description = 'Paste in your TinyPNG API key.';
		$field->required = true;
		if($this->status === self::SUCCESS) {
			$field->attr('value', $this->apikey);
			$field->notes = 'Panda says valid! Your usage this month is **' . $this->compressionCount() . '** compressed images.';
		} else {
			$field->notes = 'Please register and get your API key at [TinyPNG Developer page](https://tinypng.com/developers).';
		}
		return $field;
	}
	/**
	 * Logging on/off config inputfield
	 *
	 * @return InputfieldCheckbox
	 *
	 */
	protected function configLogging() {
		$field = wire('modules')->get('InputfieldCheckbox');
		$field->attr('name+id', 'logging');
		if($this->logging) $field->attr('checked', 'checked');
		$field->label = 'Enable logging';
		$field->description = "Write compression data to ProcessWire log file.";
		$field->columnWidth = 50;
		return $field;
	}
	/**
	 * Monthly compression limit config inputfield
	 *
	 * @return InputfieldInteger
	 *
	 */
	protected function configLimit() {
		$field = wire('modules')->get('InputfieldInteger');
		$field->attr('name+id', 'limit');
		$field->attr('value', $this->limit);
		$field->attr('min', 0);
		$field->label = 'Monthly limit';
		$field->description = 'Set monthly usage limit (zero or empty for no limit).';
		$field->columnWidth = 50;
		return $field;
	}
	/**
	 * Auto mode on/off config inputfield
	 *
	 * @return InputfieldCheckbox
	 *
	 */
	protected function configAuto() {
		$field = wire('modules')->get('InputfieldCheckbox');
		$field->attr('name+id', 'auto');
		if($this->auto) $field->attr('checked', 'checked');
		$field->label = 'Enable auto mode';
		$field->description = 'Compress `$image->size()` variations automatically.';
		$field->notes = 'You can override this option at template level by setting bool value to `$config->imageSizerOptions[\'tinify\']` or image `$options[\'tinify\']`.';
		return $field;
	}
	/**
	 * Auto mode ignored sizes config inputfield
	 *
	 * @return InputfieldText
	 *
	 */
	protected function configSizes() {
		$field = wire('modules')->get('InputfieldText');
		$field->attr('name+id', 'sizes');
		$field->attr('value', $this->sizes);
		$field->label = 'Auto mode ignored thumbnail sizes';
		$field->description = 'Ignored image thumbnail sizes for auto mode compression. Size at `$config->adminThumbOptions` is ignored automatically.';
		$field->notes = 'Separate width and height by colon and use pipe as delimiter for different sizes: 200,200|960,0|0,320';
		$field->collapsed = Inputfield::collapsedBlank;
		return $field;
	}
}
